// Code generated by "enumer -type=ColumnName -json -transform=snake-upper -output=./columnname.gen.go"; DO NOT EDIT.

package tables

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _ColumnNameName = "COLUMN_NAME_STATUSCOLUMN_NAME_ADDRESSCOLUMN_NAME_PORT_RPCCOLUMN_NAME_TOTAL_TRANSACTIONSCOLUMN_NAME_LATEST_CHECKPOINTCOLUMN_NAME_HIGHEST_CHECKPOINTCOLUMN_NAME_TX_SYNC_PROGRESSCOLUMN_NAME_CHECK_SYNC_PROGRESSCOLUMN_NAME_CONNECTED_PEERSCOLUMN_NAME_UPTIMECOLUMN_NAME_VERSIONCOLUMN_NAME_COMMITCOLUMN_NAME_COMPANYCOLUMN_NAME_COUNTRY"

var _ColumnNameIndex = [...]uint16{0, 18, 37, 57, 87, 116, 146, 174, 205, 232, 250, 269, 287, 306, 325}

const _ColumnNameLowerName = "column_name_statuscolumn_name_addresscolumn_name_port_rpccolumn_name_total_transactionscolumn_name_latest_checkpointcolumn_name_highest_checkpointcolumn_name_tx_sync_progresscolumn_name_check_sync_progresscolumn_name_connected_peerscolumn_name_uptimecolumn_name_versioncolumn_name_commitcolumn_name_companycolumn_name_country"

func (i ColumnName) String() string {
	if i < 0 || i >= ColumnName(len(_ColumnNameIndex)-1) {
		return fmt.Sprintf("ColumnName(%d)", i)
	}
	return _ColumnNameName[_ColumnNameIndex[i]:_ColumnNameIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ColumnNameNoOp() {
	var x [1]struct{}
	_ = x[ColumnNameStatus-(0)]
	_ = x[ColumnNameAddress-(1)]
	_ = x[ColumnNamePortRPC-(2)]
	_ = x[ColumnNameTotalTransactions-(3)]
	_ = x[ColumnNameLatestCheckpoint-(4)]
	_ = x[ColumnNameHighestCheckpoint-(5)]
	_ = x[ColumnNameTXSyncProgress-(6)]
	_ = x[ColumnNameCheckSyncProgress-(7)]
	_ = x[ColumnNameConnectedPeers-(8)]
	_ = x[ColumnNameUptime-(9)]
	_ = x[ColumnNameVersion-(10)]
	_ = x[ColumnNameCommit-(11)]
	_ = x[ColumnNameCompany-(12)]
	_ = x[ColumnNameCountry-(13)]
}

var _ColumnNameValues = []ColumnName{ColumnNameStatus, ColumnNameAddress, ColumnNamePortRPC, ColumnNameTotalTransactions, ColumnNameLatestCheckpoint, ColumnNameHighestCheckpoint, ColumnNameTXSyncProgress, ColumnNameCheckSyncProgress, ColumnNameConnectedPeers, ColumnNameUptime, ColumnNameVersion, ColumnNameCommit, ColumnNameCompany, ColumnNameCountry}

var _ColumnNameNameToValueMap = map[string]ColumnName{
	_ColumnNameName[0:18]:         ColumnNameStatus,
	_ColumnNameLowerName[0:18]:    ColumnNameStatus,
	_ColumnNameName[18:37]:        ColumnNameAddress,
	_ColumnNameLowerName[18:37]:   ColumnNameAddress,
	_ColumnNameName[37:57]:        ColumnNamePortRPC,
	_ColumnNameLowerName[37:57]:   ColumnNamePortRPC,
	_ColumnNameName[57:87]:        ColumnNameTotalTransactions,
	_ColumnNameLowerName[57:87]:   ColumnNameTotalTransactions,
	_ColumnNameName[87:116]:       ColumnNameLatestCheckpoint,
	_ColumnNameLowerName[87:116]:  ColumnNameLatestCheckpoint,
	_ColumnNameName[116:146]:      ColumnNameHighestCheckpoint,
	_ColumnNameLowerName[116:146]: ColumnNameHighestCheckpoint,
	_ColumnNameName[146:174]:      ColumnNameTXSyncProgress,
	_ColumnNameLowerName[146:174]: ColumnNameTXSyncProgress,
	_ColumnNameName[174:205]:      ColumnNameCheckSyncProgress,
	_ColumnNameLowerName[174:205]: ColumnNameCheckSyncProgress,
	_ColumnNameName[205:232]:      ColumnNameConnectedPeers,
	_ColumnNameLowerName[205:232]: ColumnNameConnectedPeers,
	_ColumnNameName[232:250]:      ColumnNameUptime,
	_ColumnNameLowerName[232:250]: ColumnNameUptime,
	_ColumnNameName[250:269]:      ColumnNameVersion,
	_ColumnNameLowerName[250:269]: ColumnNameVersion,
	_ColumnNameName[269:287]:      ColumnNameCommit,
	_ColumnNameLowerName[269:287]: ColumnNameCommit,
	_ColumnNameName[287:306]:      ColumnNameCompany,
	_ColumnNameLowerName[287:306]: ColumnNameCompany,
	_ColumnNameName[306:325]:      ColumnNameCountry,
	_ColumnNameLowerName[306:325]: ColumnNameCountry,
}

var _ColumnNameNames = []string{
	_ColumnNameName[0:18],
	_ColumnNameName[18:37],
	_ColumnNameName[37:57],
	_ColumnNameName[57:87],
	_ColumnNameName[87:116],
	_ColumnNameName[116:146],
	_ColumnNameName[146:174],
	_ColumnNameName[174:205],
	_ColumnNameName[205:232],
	_ColumnNameName[232:250],
	_ColumnNameName[250:269],
	_ColumnNameName[269:287],
	_ColumnNameName[287:306],
	_ColumnNameName[306:325],
}

// ColumnNameString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ColumnNameString(s string) (ColumnName, error) {
	if val, ok := _ColumnNameNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ColumnNameNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ColumnName values", s)
}

// ColumnNameValues returns all values of the enum
func ColumnNameValues() []ColumnName {
	return _ColumnNameValues
}

// ColumnNameStrings returns a slice of all String values of the enum
func ColumnNameStrings() []string {
	strs := make([]string, len(_ColumnNameNames))
	copy(strs, _ColumnNameNames)
	return strs
}

// IsAColumnName returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ColumnName) IsAColumnName() bool {
	for _, v := range _ColumnNameValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ColumnName
func (i ColumnName) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ColumnName
func (i *ColumnName) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ColumnName should be a string, got %s", data)
	}

	var err error
	*i, err = ColumnNameString(s)
	return err
}

// Code generated by "enumer -type=CellName -json -transform=snake-upper -output=./cellname.gen.go"; DO NOT EDIT.

package dashboards

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _CellNameName = "CELL_NAME_NODE_STATUSCELL_NAME_NETWORK_STATUSCELL_NAME_TRANSACTIONS_PER_SECONDCELL_NAME_CHECKPOINTS_PER_SECONDCELL_NAME_TOTAL_TRANSACTIONSCELL_NAME_LATEST_CHECKPOINTCELL_NAME_HIGHEST_CHECKPOINTCELL_NAME_CONNECTED_PEERSCELL_NAME_TX_SYNC_PROGRESSCELL_NAME_CHECK_SYNC_PROGRESSCELL_NAME_UPTIMECELL_NAME_VERSIONCELL_NAME_COMMITCELL_NAME_CURRENT_EPOCHCELL_NAME_EPOCH_PROGRESSCELL_NAME_EPOCH_ENDCELL_NAME_DISK_USAGECELL_NAME_DATABASE_SIZECELL_NAME_BYTES_SENTCELL_NAME_BYTES_RECEIVEDCELL_NAME_MEMORY_USAGECELL_NAME_CPU_USAGECELL_NAME_NODE_LOGS"

var _CellNameIndex = [...]uint16{0, 21, 45, 78, 110, 138, 165, 193, 218, 244, 273, 289, 306, 322, 345, 369, 388, 408, 431, 451, 475, 497, 516, 535}

const _CellNameLowerName = "cell_name_node_statuscell_name_network_statuscell_name_transactions_per_secondcell_name_checkpoints_per_secondcell_name_total_transactionscell_name_latest_checkpointcell_name_highest_checkpointcell_name_connected_peerscell_name_tx_sync_progresscell_name_check_sync_progresscell_name_uptimecell_name_versioncell_name_commitcell_name_current_epochcell_name_epoch_progresscell_name_epoch_endcell_name_disk_usagecell_name_database_sizecell_name_bytes_sentcell_name_bytes_receivedcell_name_memory_usagecell_name_cpu_usagecell_name_node_logs"

func (i CellName) String() string {
	if i < 0 || i >= CellName(len(_CellNameIndex)-1) {
		return fmt.Sprintf("CellName(%d)", i)
	}
	return _CellNameName[_CellNameIndex[i]:_CellNameIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _CellNameNoOp() {
	var x [1]struct{}
	_ = x[CellNameNodeStatus-(0)]
	_ = x[CellNameNetworkStatus-(1)]
	_ = x[CellNameTransactionsPerSecond-(2)]
	_ = x[CellNameCheckpointsPerSecond-(3)]
	_ = x[CellNameTotalTransactions-(4)]
	_ = x[CellNameLatestCheckpoint-(5)]
	_ = x[CellNameHighestCheckpoint-(6)]
	_ = x[CellNameConnectedPeers-(7)]
	_ = x[CellNameTXSyncProgress-(8)]
	_ = x[CellNameCheckSyncProgress-(9)]
	_ = x[CellNameUptime-(10)]
	_ = x[CellNameVersion-(11)]
	_ = x[CellNameCommit-(12)]
	_ = x[CellNameCurrentEpoch-(13)]
	_ = x[CellNameEpochProgress-(14)]
	_ = x[CellNameEpochEnd-(15)]
	_ = x[CellNameDiskUsage-(16)]
	_ = x[CellNameDatabaseSize-(17)]
	_ = x[CellNameBytesSent-(18)]
	_ = x[CellNameBytesReceived-(19)]
	_ = x[CellNameMemoryUsage-(20)]
	_ = x[CellNameCpuUsage-(21)]
	_ = x[CellNameNodeLogs-(22)]
}

var _CellNameValues = []CellName{CellNameNodeStatus, CellNameNetworkStatus, CellNameTransactionsPerSecond, CellNameCheckpointsPerSecond, CellNameTotalTransactions, CellNameLatestCheckpoint, CellNameHighestCheckpoint, CellNameConnectedPeers, CellNameTXSyncProgress, CellNameCheckSyncProgress, CellNameUptime, CellNameVersion, CellNameCommit, CellNameCurrentEpoch, CellNameEpochProgress, CellNameEpochEnd, CellNameDiskUsage, CellNameDatabaseSize, CellNameBytesSent, CellNameBytesReceived, CellNameMemoryUsage, CellNameCpuUsage, CellNameNodeLogs}

var _CellNameNameToValueMap = map[string]CellName{
	_CellNameName[0:21]:         CellNameNodeStatus,
	_CellNameLowerName[0:21]:    CellNameNodeStatus,
	_CellNameName[21:45]:        CellNameNetworkStatus,
	_CellNameLowerName[21:45]:   CellNameNetworkStatus,
	_CellNameName[45:78]:        CellNameTransactionsPerSecond,
	_CellNameLowerName[45:78]:   CellNameTransactionsPerSecond,
	_CellNameName[78:110]:       CellNameCheckpointsPerSecond,
	_CellNameLowerName[78:110]:  CellNameCheckpointsPerSecond,
	_CellNameName[110:138]:      CellNameTotalTransactions,
	_CellNameLowerName[110:138]: CellNameTotalTransactions,
	_CellNameName[138:165]:      CellNameLatestCheckpoint,
	_CellNameLowerName[138:165]: CellNameLatestCheckpoint,
	_CellNameName[165:193]:      CellNameHighestCheckpoint,
	_CellNameLowerName[165:193]: CellNameHighestCheckpoint,
	_CellNameName[193:218]:      CellNameConnectedPeers,
	_CellNameLowerName[193:218]: CellNameConnectedPeers,
	_CellNameName[218:244]:      CellNameTXSyncProgress,
	_CellNameLowerName[218:244]: CellNameTXSyncProgress,
	_CellNameName[244:273]:      CellNameCheckSyncProgress,
	_CellNameLowerName[244:273]: CellNameCheckSyncProgress,
	_CellNameName[273:289]:      CellNameUptime,
	_CellNameLowerName[273:289]: CellNameUptime,
	_CellNameName[289:306]:      CellNameVersion,
	_CellNameLowerName[289:306]: CellNameVersion,
	_CellNameName[306:322]:      CellNameCommit,
	_CellNameLowerName[306:322]: CellNameCommit,
	_CellNameName[322:345]:      CellNameCurrentEpoch,
	_CellNameLowerName[322:345]: CellNameCurrentEpoch,
	_CellNameName[345:369]:      CellNameEpochProgress,
	_CellNameLowerName[345:369]: CellNameEpochProgress,
	_CellNameName[369:388]:      CellNameEpochEnd,
	_CellNameLowerName[369:388]: CellNameEpochEnd,
	_CellNameName[388:408]:      CellNameDiskUsage,
	_CellNameLowerName[388:408]: CellNameDiskUsage,
	_CellNameName[408:431]:      CellNameDatabaseSize,
	_CellNameLowerName[408:431]: CellNameDatabaseSize,
	_CellNameName[431:451]:      CellNameBytesSent,
	_CellNameLowerName[431:451]: CellNameBytesSent,
	_CellNameName[451:475]:      CellNameBytesReceived,
	_CellNameLowerName[451:475]: CellNameBytesReceived,
	_CellNameName[475:497]:      CellNameMemoryUsage,
	_CellNameLowerName[475:497]: CellNameMemoryUsage,
	_CellNameName[497:516]:      CellNameCpuUsage,
	_CellNameLowerName[497:516]: CellNameCpuUsage,
	_CellNameName[516:535]:      CellNameNodeLogs,
	_CellNameLowerName[516:535]: CellNameNodeLogs,
}

var _CellNameNames = []string{
	_CellNameName[0:21],
	_CellNameName[21:45],
	_CellNameName[45:78],
	_CellNameName[78:110],
	_CellNameName[110:138],
	_CellNameName[138:165],
	_CellNameName[165:193],
	_CellNameName[193:218],
	_CellNameName[218:244],
	_CellNameName[244:273],
	_CellNameName[273:289],
	_CellNameName[289:306],
	_CellNameName[306:322],
	_CellNameName[322:345],
	_CellNameName[345:369],
	_CellNameName[369:388],
	_CellNameName[388:408],
	_CellNameName[408:431],
	_CellNameName[431:451],
	_CellNameName[451:475],
	_CellNameName[475:497],
	_CellNameName[497:516],
	_CellNameName[516:535],
}

// CellNameString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CellNameString(s string) (CellName, error) {
	if val, ok := _CellNameNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _CellNameNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CellName values", s)
}

// CellNameValues returns all values of the enum
func CellNameValues() []CellName {
	return _CellNameValues
}

// CellNameStrings returns a slice of all String values of the enum
func CellNameStrings() []string {
	strs := make([]string, len(_CellNameNames))
	copy(strs, _CellNameNames)
	return strs
}

// IsACellName returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CellName) IsACellName() bool {
	for _, v := range _CellNameValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for CellName
func (i CellName) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for CellName
func (i *CellName) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CellName should be a string, got %s", data)
	}

	var err error
	*i, err = CellNameString(s)
	return err
}

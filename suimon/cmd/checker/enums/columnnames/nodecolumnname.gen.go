// Code generated by "enumer -type=NodeColumnName -json -transform=snake-upper -output=./nodecolumnname.gen.go"; DO NOT EDIT.

package columnnames

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _NodeColumnNameName = "NODE_COLUMN_NAME_HEALTHNODE_COLUMN_NAME_ADDRESSNODE_COLUMN_NAME_PORT_RPCNODE_COLUMN_NAME_TOTAL_TRANSACTIONSNODE_COLUMN_NAME_LATEST_CHECKPOINTNODE_COLUMN_NAME_TOTAL_TRANSACTION_CERTIFICATESNODE_COLUMN_NAME_TOTAL_TRANSACTION_EFFECTSNODE_COLUMN_NAME_HIGHEST_KNOWN_CHECKPOINTNODE_COLUMN_NAME_LAST_EXECUTED_CHECKPOINTNODE_COLUMN_NAME_CHECKPOINT_EXEC_BACKLOGNODE_COLUMN_NAME_HIGHEST_SYNCED_CHECKPOINTNODE_COLUMN_NAME_CHECKPOINT_SYNC_BACKLOGNODE_COLUMN_NAME_CURRENT_EPOCHNODE_COLUMN_NAME_TX_SYNC_PERCENTAGENODE_COLUMN_NAME_CHECK_SYNC_PERCENTAGENODE_COLUMN_NAME_NETWORK_PEERSNODE_COLUMN_NAME_UPTIMENODE_COLUMN_NAME_VERSIONNODE_COLUMN_NAME_COMMITNODE_COLUMN_NAME_COUNTRY"

var _NodeColumnNameIndex = [...]uint16{0, 23, 47, 72, 107, 141, 188, 230, 271, 312, 352, 394, 434, 464, 499, 537, 567, 590, 614, 637, 661}

const _NodeColumnNameLowerName = "node_column_name_healthnode_column_name_addressnode_column_name_port_rpcnode_column_name_total_transactionsnode_column_name_latest_checkpointnode_column_name_total_transaction_certificatesnode_column_name_total_transaction_effectsnode_column_name_highest_known_checkpointnode_column_name_last_executed_checkpointnode_column_name_checkpoint_exec_backlognode_column_name_highest_synced_checkpointnode_column_name_checkpoint_sync_backlognode_column_name_current_epochnode_column_name_tx_sync_percentagenode_column_name_check_sync_percentagenode_column_name_network_peersnode_column_name_uptimenode_column_name_versionnode_column_name_commitnode_column_name_country"

func (i NodeColumnName) String() string {
	if i < 0 || i >= NodeColumnName(len(_NodeColumnNameIndex)-1) {
		return fmt.Sprintf("NodeColumnName(%d)", i)
	}
	return _NodeColumnNameName[_NodeColumnNameIndex[i]:_NodeColumnNameIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _NodeColumnNameNoOp() {
	var x [1]struct{}
	_ = x[NodeColumnNameHealth-(0)]
	_ = x[NodeColumnNameAddress-(1)]
	_ = x[NodeColumnNamePortRPC-(2)]
	_ = x[NodeColumnNameTotalTransactions-(3)]
	_ = x[NodeColumnNameLatestCheckpoint-(4)]
	_ = x[NodeColumnNameTotalTransactionCertificates-(5)]
	_ = x[NodeColumnNameTotalTransactionEffects-(6)]
	_ = x[NodeColumnNameHighestKnownCheckpoint-(7)]
	_ = x[NodeColumnNameLastExecutedCheckpoint-(8)]
	_ = x[NodeColumnNameCheckpointExecBacklog-(9)]
	_ = x[NodeColumnNameHighestSyncedCheckpoint-(10)]
	_ = x[NodeColumnNameCheckpointSyncBacklog-(11)]
	_ = x[NodeColumnNameCurrentEpoch-(12)]
	_ = x[NodeColumnNameTXSyncPercentage-(13)]
	_ = x[NodeColumnNameCheckSyncPercentage-(14)]
	_ = x[NodeColumnNameNetworkPeers-(15)]
	_ = x[NodeColumnNameUptime-(16)]
	_ = x[NodeColumnNameVersion-(17)]
	_ = x[NodeColumnNameCommit-(18)]
	_ = x[NodeColumnNameCountry-(19)]
}

var _NodeColumnNameValues = []NodeColumnName{NodeColumnNameHealth, NodeColumnNameAddress, NodeColumnNamePortRPC, NodeColumnNameTotalTransactions, NodeColumnNameLatestCheckpoint, NodeColumnNameTotalTransactionCertificates, NodeColumnNameTotalTransactionEffects, NodeColumnNameHighestKnownCheckpoint, NodeColumnNameLastExecutedCheckpoint, NodeColumnNameCheckpointExecBacklog, NodeColumnNameHighestSyncedCheckpoint, NodeColumnNameCheckpointSyncBacklog, NodeColumnNameCurrentEpoch, NodeColumnNameTXSyncPercentage, NodeColumnNameCheckSyncPercentage, NodeColumnNameNetworkPeers, NodeColumnNameUptime, NodeColumnNameVersion, NodeColumnNameCommit, NodeColumnNameCountry}

var _NodeColumnNameNameToValueMap = map[string]NodeColumnName{
	_NodeColumnNameName[0:23]:         NodeColumnNameHealth,
	_NodeColumnNameLowerName[0:23]:    NodeColumnNameHealth,
	_NodeColumnNameName[23:47]:        NodeColumnNameAddress,
	_NodeColumnNameLowerName[23:47]:   NodeColumnNameAddress,
	_NodeColumnNameName[47:72]:        NodeColumnNamePortRPC,
	_NodeColumnNameLowerName[47:72]:   NodeColumnNamePortRPC,
	_NodeColumnNameName[72:107]:       NodeColumnNameTotalTransactions,
	_NodeColumnNameLowerName[72:107]:  NodeColumnNameTotalTransactions,
	_NodeColumnNameName[107:141]:      NodeColumnNameLatestCheckpoint,
	_NodeColumnNameLowerName[107:141]: NodeColumnNameLatestCheckpoint,
	_NodeColumnNameName[141:188]:      NodeColumnNameTotalTransactionCertificates,
	_NodeColumnNameLowerName[141:188]: NodeColumnNameTotalTransactionCertificates,
	_NodeColumnNameName[188:230]:      NodeColumnNameTotalTransactionEffects,
	_NodeColumnNameLowerName[188:230]: NodeColumnNameTotalTransactionEffects,
	_NodeColumnNameName[230:271]:      NodeColumnNameHighestKnownCheckpoint,
	_NodeColumnNameLowerName[230:271]: NodeColumnNameHighestKnownCheckpoint,
	_NodeColumnNameName[271:312]:      NodeColumnNameLastExecutedCheckpoint,
	_NodeColumnNameLowerName[271:312]: NodeColumnNameLastExecutedCheckpoint,
	_NodeColumnNameName[312:352]:      NodeColumnNameCheckpointExecBacklog,
	_NodeColumnNameLowerName[312:352]: NodeColumnNameCheckpointExecBacklog,
	_NodeColumnNameName[352:394]:      NodeColumnNameHighestSyncedCheckpoint,
	_NodeColumnNameLowerName[352:394]: NodeColumnNameHighestSyncedCheckpoint,
	_NodeColumnNameName[394:434]:      NodeColumnNameCheckpointSyncBacklog,
	_NodeColumnNameLowerName[394:434]: NodeColumnNameCheckpointSyncBacklog,
	_NodeColumnNameName[434:464]:      NodeColumnNameCurrentEpoch,
	_NodeColumnNameLowerName[434:464]: NodeColumnNameCurrentEpoch,
	_NodeColumnNameName[464:499]:      NodeColumnNameTXSyncPercentage,
	_NodeColumnNameLowerName[464:499]: NodeColumnNameTXSyncPercentage,
	_NodeColumnNameName[499:537]:      NodeColumnNameCheckSyncPercentage,
	_NodeColumnNameLowerName[499:537]: NodeColumnNameCheckSyncPercentage,
	_NodeColumnNameName[537:567]:      NodeColumnNameNetworkPeers,
	_NodeColumnNameLowerName[537:567]: NodeColumnNameNetworkPeers,
	_NodeColumnNameName[567:590]:      NodeColumnNameUptime,
	_NodeColumnNameLowerName[567:590]: NodeColumnNameUptime,
	_NodeColumnNameName[590:614]:      NodeColumnNameVersion,
	_NodeColumnNameLowerName[590:614]: NodeColumnNameVersion,
	_NodeColumnNameName[614:637]:      NodeColumnNameCommit,
	_NodeColumnNameLowerName[614:637]: NodeColumnNameCommit,
	_NodeColumnNameName[637:661]:      NodeColumnNameCountry,
	_NodeColumnNameLowerName[637:661]: NodeColumnNameCountry,
}

var _NodeColumnNameNames = []string{
	_NodeColumnNameName[0:23],
	_NodeColumnNameName[23:47],
	_NodeColumnNameName[47:72],
	_NodeColumnNameName[72:107],
	_NodeColumnNameName[107:141],
	_NodeColumnNameName[141:188],
	_NodeColumnNameName[188:230],
	_NodeColumnNameName[230:271],
	_NodeColumnNameName[271:312],
	_NodeColumnNameName[312:352],
	_NodeColumnNameName[352:394],
	_NodeColumnNameName[394:434],
	_NodeColumnNameName[434:464],
	_NodeColumnNameName[464:499],
	_NodeColumnNameName[499:537],
	_NodeColumnNameName[537:567],
	_NodeColumnNameName[567:590],
	_NodeColumnNameName[590:614],
	_NodeColumnNameName[614:637],
	_NodeColumnNameName[637:661],
}

// NodeColumnNameString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func NodeColumnNameString(s string) (NodeColumnName, error) {
	if val, ok := _NodeColumnNameNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _NodeColumnNameNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to NodeColumnName values", s)
}

// NodeColumnNameValues returns all values of the enum
func NodeColumnNameValues() []NodeColumnName {
	return _NodeColumnNameValues
}

// NodeColumnNameStrings returns a slice of all String values of the enum
func NodeColumnNameStrings() []string {
	strs := make([]string, len(_NodeColumnNameNames))
	copy(strs, _NodeColumnNameNames)
	return strs
}

// IsANodeColumnName returns "true" if the value is listed in the enum definition. "false" otherwise
func (i NodeColumnName) IsANodeColumnName() bool {
	for _, v := range _NodeColumnNameValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for NodeColumnName
func (i NodeColumnName) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for NodeColumnName
func (i *NodeColumnName) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("NodeColumnName should be a string, got %s", data)
	}

	var err error
	*i, err = NodeColumnNameString(s)
	return err
}

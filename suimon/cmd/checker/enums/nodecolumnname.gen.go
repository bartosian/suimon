// Code generated by "enumer -type=NodeColumnName -json -transform=snake-upper -output=./nodecolumnname.gen.go"; DO NOT EDIT.

package enums

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _NodeColumnNameName = "COLUMN_NAME_HEALTHCOLUMN_NAME_ADDRESSCOLUMN_NAME_PORT_RPCCOLUMN_NAME_TOTAL_TRANSACTIONSCOLUMN_NAME_TOTAL_TRANSACTION_CERTIFICATESCOLUMN_NAME_TOTAL_TRANSACTION_EFFECTSCOLUMN_NAME_LATEST_CHECKPOINTCOLUMN_NAME_HIGHEST_KNOWN_CHECKPOINTCOLUMN_NAME_HIGHEST_SYNCED_CHECKPOINTCOLUMN_NAME_CURRENT_EPOCHCOLUMN_NAME_TX_SYNC_PROGRESSCOLUMN_NAME_CHECK_SYNC_PROGRESSCOLUMN_NAME_NETWORK_PEERSCOLUMN_NAME_UPTIMECOLUMN_NAME_VERSIONCOLUMN_NAME_COMMITCOLUMN_NAME_COMPANYCOLUMN_NAME_COUNTRY"

var _NodeColumnNameIndex = [...]uint16{0, 18, 37, 57, 87, 129, 166, 195, 231, 268, 293, 321, 352, 377, 395, 414, 432, 451, 470}

const _NodeColumnNameLowerName = "column_name_healthcolumn_name_addresscolumn_name_port_rpccolumn_name_total_transactionscolumn_name_total_transaction_certificatescolumn_name_total_transaction_effectscolumn_name_latest_checkpointcolumn_name_highest_known_checkpointcolumn_name_highest_synced_checkpointcolumn_name_current_epochcolumn_name_tx_sync_progresscolumn_name_check_sync_progresscolumn_name_network_peerscolumn_name_uptimecolumn_name_versioncolumn_name_commitcolumn_name_companycolumn_name_country"

func (i NodeColumnName) String() string {
	if i < 0 || i >= NodeColumnName(len(_NodeColumnNameIndex)-1) {
		return fmt.Sprintf("NodeColumnName(%d)", i)
	}
	return _NodeColumnNameName[_NodeColumnNameIndex[i]:_NodeColumnNameIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _NodeColumnNameNoOp() {
	var x [1]struct{}
	_ = x[ColumnNameHealth-(0)]
	_ = x[ColumnNameAddress-(1)]
	_ = x[ColumnNamePortRPC-(2)]
	_ = x[ColumnNameTotalTransactions-(3)]
	_ = x[ColumnNameTotalTransactionCertificates-(4)]
	_ = x[ColumnNameTotalTransactionEffects-(5)]
	_ = x[ColumnNameLatestCheckpoint-(6)]
	_ = x[ColumnNameHighestKnownCheckpoint-(7)]
	_ = x[ColumnNameHighestSyncedCheckpoint-(8)]
	_ = x[ColumnNameCurrentEpoch-(9)]
	_ = x[ColumnNameTXSyncProgress-(10)]
	_ = x[ColumnNameCheckSyncProgress-(11)]
	_ = x[ColumnNameNetworkPeers-(12)]
	_ = x[ColumnNameUptime-(13)]
	_ = x[ColumnNameVersion-(14)]
	_ = x[ColumnNameCommit-(15)]
	_ = x[ColumnNameCompany-(16)]
	_ = x[ColumnNameCountry-(17)]
}

var _NodeColumnNameValues = []NodeColumnName{ColumnNameHealth, ColumnNameAddress, ColumnNamePortRPC, ColumnNameTotalTransactions, ColumnNameTotalTransactionCertificates, ColumnNameTotalTransactionEffects, ColumnNameLatestCheckpoint, ColumnNameHighestKnownCheckpoint, ColumnNameHighestSyncedCheckpoint, ColumnNameCurrentEpoch, ColumnNameTXSyncProgress, ColumnNameCheckSyncProgress, ColumnNameNetworkPeers, ColumnNameUptime, ColumnNameVersion, ColumnNameCommit, ColumnNameCompany, ColumnNameCountry}

var _NodeColumnNameNameToValueMap = map[string]NodeColumnName{
	_NodeColumnNameName[0:18]:         ColumnNameHealth,
	_NodeColumnNameLowerName[0:18]:    ColumnNameHealth,
	_NodeColumnNameName[18:37]:        ColumnNameAddress,
	_NodeColumnNameLowerName[18:37]:   ColumnNameAddress,
	_NodeColumnNameName[37:57]:        ColumnNamePortRPC,
	_NodeColumnNameLowerName[37:57]:   ColumnNamePortRPC,
	_NodeColumnNameName[57:87]:        ColumnNameTotalTransactions,
	_NodeColumnNameLowerName[57:87]:   ColumnNameTotalTransactions,
	_NodeColumnNameName[87:129]:       ColumnNameTotalTransactionCertificates,
	_NodeColumnNameLowerName[87:129]:  ColumnNameTotalTransactionCertificates,
	_NodeColumnNameName[129:166]:      ColumnNameTotalTransactionEffects,
	_NodeColumnNameLowerName[129:166]: ColumnNameTotalTransactionEffects,
	_NodeColumnNameName[166:195]:      ColumnNameLatestCheckpoint,
	_NodeColumnNameLowerName[166:195]: ColumnNameLatestCheckpoint,
	_NodeColumnNameName[195:231]:      ColumnNameHighestKnownCheckpoint,
	_NodeColumnNameLowerName[195:231]: ColumnNameHighestKnownCheckpoint,
	_NodeColumnNameName[231:268]:      ColumnNameHighestSyncedCheckpoint,
	_NodeColumnNameLowerName[231:268]: ColumnNameHighestSyncedCheckpoint,
	_NodeColumnNameName[268:293]:      ColumnNameCurrentEpoch,
	_NodeColumnNameLowerName[268:293]: ColumnNameCurrentEpoch,
	_NodeColumnNameName[293:321]:      ColumnNameTXSyncProgress,
	_NodeColumnNameLowerName[293:321]: ColumnNameTXSyncProgress,
	_NodeColumnNameName[321:352]:      ColumnNameCheckSyncProgress,
	_NodeColumnNameLowerName[321:352]: ColumnNameCheckSyncProgress,
	_NodeColumnNameName[352:377]:      ColumnNameNetworkPeers,
	_NodeColumnNameLowerName[352:377]: ColumnNameNetworkPeers,
	_NodeColumnNameName[377:395]:      ColumnNameUptime,
	_NodeColumnNameLowerName[377:395]: ColumnNameUptime,
	_NodeColumnNameName[395:414]:      ColumnNameVersion,
	_NodeColumnNameLowerName[395:414]: ColumnNameVersion,
	_NodeColumnNameName[414:432]:      ColumnNameCommit,
	_NodeColumnNameLowerName[414:432]: ColumnNameCommit,
	_NodeColumnNameName[432:451]:      ColumnNameCompany,
	_NodeColumnNameLowerName[432:451]: ColumnNameCompany,
	_NodeColumnNameName[451:470]:      ColumnNameCountry,
	_NodeColumnNameLowerName[451:470]: ColumnNameCountry,
}

var _NodeColumnNameNames = []string{
	_NodeColumnNameName[0:18],
	_NodeColumnNameName[18:37],
	_NodeColumnNameName[37:57],
	_NodeColumnNameName[57:87],
	_NodeColumnNameName[87:129],
	_NodeColumnNameName[129:166],
	_NodeColumnNameName[166:195],
	_NodeColumnNameName[195:231],
	_NodeColumnNameName[231:268],
	_NodeColumnNameName[268:293],
	_NodeColumnNameName[293:321],
	_NodeColumnNameName[321:352],
	_NodeColumnNameName[352:377],
	_NodeColumnNameName[377:395],
	_NodeColumnNameName[395:414],
	_NodeColumnNameName[414:432],
	_NodeColumnNameName[432:451],
	_NodeColumnNameName[451:470],
}

// NodeColumnNameString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func NodeColumnNameString(s string) (NodeColumnName, error) {
	if val, ok := _NodeColumnNameNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _NodeColumnNameNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to NodeColumnName values", s)
}

// NodeColumnNameValues returns all values of the enum
func NodeColumnNameValues() []NodeColumnName {
	return _NodeColumnNameValues
}

// NodeColumnNameStrings returns a slice of all String values of the enum
func NodeColumnNameStrings() []string {
	strs := make([]string, len(_NodeColumnNameNames))
	copy(strs, _NodeColumnNameNames)
	return strs
}

// IsANodeColumnName returns "true" if the value is listed in the enum definition. "false" otherwise
func (i NodeColumnName) IsANodeColumnName() bool {
	for _, v := range _NodeColumnNameValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for NodeColumnName
func (i NodeColumnName) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for NodeColumnName
func (i *NodeColumnName) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("NodeColumnName should be a string, got %s", data)
	}

	var err error
	*i, err = NodeColumnNameString(s)
	return err
}
